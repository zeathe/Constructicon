<?xml version="1.0" encoding="ISO-8859-1" ?>
<project name="Constructicon" basedir=".." default="compile.dist">
	<!-- 
	Build System Setup:

	We're assuming the environment variable BSLandingZone is present.
	This represents the location on disk that we'll be pushing compile
	output bits to... and building our package structures into.

	The following variables are of interest...

	**** $(BSLandingZone) 	>>>> ${output.root} (sorta)
	**** ${basedir} 	>>>> ${proj.root}

	${output.root}		=	Where Compile Output goes
	${logging.root}		=	Where the Log Output goes
	${proj.root}		=	Base directory of Sources
	${src.root}		=	Where .m, .h, and .pch should be
	${nib.root}		=	Where .xib and .nib files should exist
					in a localized state (IE English.lproj)
	${BuildSystem.root}	=	Location for shared BuildSystem files
					as expected to be.

	This is a sub-project XML file.  It wil receive all of the above
	variables through inheritence.

	-->

	<target name="package.debug">
		<echo message="Setting DEBUG Obj Root" />
		<property name="obj.root.debug" value="${obj.root}/debug" />
		<echo message="Staging Debug DMG Template" />
		<copy file="${proj.root}/BUILD/mac.DMG/Constructicon.Template.dmg.sparseimage" tofile="${obj.root}/Constructicon.debug.dmg.sparseimage" />
		<echo message="Making DEBUGDMG Mountpoint" />
		<mkdir dir="${obj.root}/DEBUGDMG" />
		<exec executable="hdiutil">
			<arg value="attach" />
			<arg value="${obj.root}/Constructicon.debug.dmg.sparseimage" />
			<arg value="-mountpoint" />
			<arg value="${obj.root}/DEBUGDMG" />
			<arg value="-nobrowse" />
		</exec>
		<waitfor maxwait="30" maxwaitunit="second">
			<available file="${obj.root}/DEBUGDMG" />
		</waitfor>
		<copy todir="${obj.root}/DEBUGDMG/Constructicon">
			<fileset dir="${proj.root}">
				<exclude name="BUILD/**" />
				<exclude name=".git/**" />
				<exclude name=".gitignore" />
				<exclude name="build.xml" />
				<exclude name=".constructicon.maintenance" />
			</fileset>
		</copy>
		<exec executable="diskutil">
			<arg value="renameVolume" />
			<arg value="${obj.root}/DEBUGDMG" />
			<arg value="Constructicon v${env.constructicon.majorversion}.${env.constructicon.minorversion}.${env.constructicon.maintenanceversion}.${env.constructicon.buildid} DEBUG" />
		</exec>
		<exec executable="hdiutil">
			<arg value="convert" />
			<arg value="${obj.root}/Constructicon.debug.dmg.sparseimage" />
			<arg value="-format" />
			<arg value="UDRO" />
			<arg value="-o" />
			<arg value="${output.root}/Constructicon.debug.dmg" />
		</exec>
		<exec executable="hdiutil">
			<arg value="eject" />
			<arg value="${obj.root}/DEBUGDMG" />
		</exec>
	</target>

	<target name="filecopy.debug">
		<copy todir="${output.root}/DEBUG">
			<fileset dir="${proj.root}">
				<exclude name="BUILD/**" />
				<exclude name=".git/**" />
				<exclude name=".gitignore" />
				<exclude name="build.xml" />
				<exclude name=".constructicon.maintenance" />
			</fileset>
		</copy>
	</target>


	<target name="compile.debug">
		<!-- Disabled

		I have yet to figure out why the physical steps
		required in the HDIUTIL execution work fine on 
		the command prompt in Terminal, yet Java, ANT,
		Python, or something else in between is futzing
		permissions and forcing the sparse image to only
		mount read-only
		<antcall target="package.debug" />
		-->
		<antcall target="filecopy.debug" />
	</target>

	<target name="package.dist">
		<property name="obj.root.dist" value="${obj.root}/dist" />
		<copy file="${proj.root}/BUILD/mac.DMG/Constructicon.Template.dmg.sparseimage" tofile="${obj.root}/Constructicon.dmg.sparseimage" />
		<mkdir dir="${obj.root}/DISTDMG" />
		<exec executable="hdiutil">
			<arg value="attach" />
			<arg value="${obj.root}/Constructicon.dmg.sparseimage" />
			<arg value="-mountpoint" />
			<arg value="${obj.root}/DISTDMG" />
			<arg value="-nobrowse" />
		</exec>
		<waitfor maxwait="30" maxwaitunit="second">
			<available file="${obj.root}/DISTDMG" />
		</waitfor>
		<copy todir="${obj.root}/DISTDMG/Constructicon">
			<fileset dir="${proj.root}">
				<exclude name="BUILD/**" />
				<exclude name=".git/**" />
				<exclude name=".gitignore" />
				<exclude name="build.xml" />
				<exclude name=".constructicon.maintenance" />
			</fileset>
		</copy>
		<exec executable="diskutil">
			<arg value="renameVolume" />
			<arg value="${obj.root}/DISTDMG" />
			<arg value='"Constructicon v${env.constructicon.majorversion}.${env.constructicon.minorversion}.${env.constructicon.maintenanceversion}.${env.constructicon.buildid}"' />
		</exec>
		<exec executable="hdiutil">
			<arg value="convert" />
			<arg value="${obj.root}/Constructicon.dmg.sparseimage" />
			<arg value="-format" />
			<arg value="UDRO" />
			<arg value="-o" />
			<arg value="${output.root}/Constructicon.dmg" />
		</exec>
		<exec executable="hdiutil">
			<arg value="eject" />
			<arg value="${obj.root}/DISTDMG" />
		</exec>
	</target>

	<target name="filecopy.dist">
		<copy todir="${output.root}/DIST">
			<fileset dir="${proj.root}">
				<exclude name="BUILD/**" />
				<exclude name=".git/**" />
				<exclude name=".gitignore" />
				<exclude name="build.xml" />
				<exclude name=".constructicon.maintenance" />
			</fileset>
		</copy>
	</target>


	<target name="compile.dist">
		<!-- Disabled

		I have yet to figure out why the physical steps
		required in the HDIUTIL execution work fine on 
		the command prompt in Terminal, yet Java, ANT,
		Python, or something else in between is futzing
		permissions and forcing the sparse image to only
		mount read-only
		<antcall target="package.dist" />
		-->
		<antcall target="filecopy.dist" />
	</target>

</project>
